%{
/* Copyright 2021-2025 MarcosHCK
 * This file is part of SMIPS Assembler.
 *
 * SMIPS Assembler is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SMIPS Assembler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SMIPS Assembler. If not, see <http://www.gnu.org/licenses/>.
 *
 */
#include <config.h>
#include <tag.h>
%}

%struct-type
%define hash-function-name _smips_tag_index_hash
%define lookup-function-name _smips_tag_index_lookup
%compare-strncmp
%omit-struct-type

struct _SmipsTagIndex {};
%%
value, LUA_TNUMBER, TAG_VALUE, G_STRUCT_OFFSET (SmipsTag, value)
left, -1, TAG_OPER, G_STRUCT_OFFSET (SmipsTag, left)
right, -1, TAG_OPER, G_STRUCT_OFFSET (SmipsTag, right)
%%

#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))

void *_smips_tag_new ()
{
  SmipsTag* tag = g_slice_new0 (SmipsTag);
  g_atomic_ref_count_init (&tag->refs);
return tag;
}

void *_smips_tag_ref (gpointer ptag)
{
  SmipsTag* tag = ptag;
  g_atomic_ref_count_inc (&tag->refs);
return (void*) tag;  
}

void _smips_tag_unref (gpointer ptag)
{
  SmipsTag* tag = ptag;
  if (g_atomic_ref_count_dec (&tag->refs))
  {
    if ((tag->type & TAG_VALUE) == 0)
    {
      g_clear_pointer (&tag->left, _smips_tag_unref);
      g_clear_pointer (&tag->right, _smips_tag_unref);
    }

    g_slice_free (SmipsTag, ptag);
  }
}

void _smips_tag_type (const SmipsTag* tag, const gchar** _type, const gchar** _subtype)
{
  static const gchar* types [] = { "operation", "value", };
  static const gchar* operationes[] = { "add", "sub", "mul", "div", "idiv", "mod", "unm", };
  static const gchar* values [] = { "absolute", "relative", };

  const int type = tag->type & TAG_TYPE_MASK;
  const int operation = tag->type & TAG_OPER_MASK;
  const int value = tag->type & TAG_VALUE_MASK;

  if ((type & TAG_VALUE))
    *_subtype = values [(value >> 1) - 1];
  else
    *_subtype = operationes [(operation >> 1) - 1];
    *_type = types [type];
}

void _smips_tag_print (const SmipsTag* tag, int level)
{
  gchar stat [32];
  gchar *idents, *_idents = NULL;
  const gchar *type, *subtype;

  if (level >= G_N_ELEMENTS (stat))
  {
    _idents = g_strnfill (level, ' ');
    idents = _idents;
  }
  else
  {
    int i;
    for (i = 0; i < level; i++)
      stat [i] = ' ';
      stat [level] = '\0';
      idents = stat;
  }

  _smips_tag_type (tag, &type, &subtype);

  if ((tag->type & TAG_VALUE) != 0)
  {
    g_print ("%s- %s : %i\r\n", idents, type, tag->value);
    _g_free0 (_idents);
  }
  else
  {
    g_print ("%s- op : %s\r\n", idents, subtype);
    _g_free0 (_idents);

    if (tag->left != NULL)
      _smips_tag_print (tag->left, level + 1);
    if (tag->right != NULL)
      _smips_tag_print (tag->right, level + 1);
  }
}
